import java.applet.Applet;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.ListIterator;

import javax.swing.Timer;

public class ColorfulCellularAutomaton extends Applet
implements ActionListener, MouseListener, MouseMotionListener, ComponentListener, KeyListener {
	private int vCells;
	private int hCells;
	private int cellWidth;
	private int savedEvolutions;
	private double delayInSeconds;
	private boolean cellsInput;
	private boolean drawPulsar;
	private boolean drawGrid;
	private ListIterator<Color> colorIterator;
	private LinkedList<EvolutionState> states;
	private Color cellColor;
	private Color bgColor;
	private EvolutionState currentState;
	private EvolutionState newState;
	private Timer timer;

	// timer and other fun variables
	@Override
	public void init() {
		this.addMouseListener(this);
		this.addMouseMotionListener(this);
		this.addComponentListener(this);
		this.addKeyListener(this);
		this.cellWidth = 10;
		this.vCells = this.getHeight() / this.cellWidth;
		this.hCells = this.getWidth() / this.cellWidth;
		this.currentState = new EvolutionState(this.vCells, this.hCells, this.cellWidth);
		this.newState = new EvolutionState(this.vCells, this.hCells, this.cellWidth);
		this.delayInSeconds = 0.2;
		this.timer = new Timer((int) (this.delayInSeconds * 1000), this);
		this.savedEvolutions = 4;
		this.cellsInput = true;
		this.drawGrid = false;
		this.drawPulsar = false;
		this.states = new LinkedList<>();
		ArrayList<Color> colors = new ArrayList<>(Arrays.asList(Color.decode("#D0000D"), Color.decode("#9AA9A"),
				Color.decode("#B77355"), Color.decode("#600F5"), Color.decode("#AAA5D"), Color.decode("#6AFF5")));
		this.cellColor = colors.get(0);
		this.colorIterator = colors.listIterator();
		this.bgColor = new HSLColor(this.cellColor).getComplementary();
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		this.runLife();
	}

	// repaints new iteration, following rules for deaths and births
	public void runLife() {
		int min = 2;
		int max = 3;
		int birthVal = 3;

		if (this.states.size() >= this.savedEvolutions)
			this.states.removeFirst(); // saves fixed # of previous automata states
		this.states.add(this.currentState.clone());
		this.newState = this.currentState.clone(); // build new state off previous

		// kill if surrounded by fewer than pop min, greater than max, birth if
		// surrounded by reproduction amount
		for (int r = 0; r < this.vCells; r++) {
			for (int c = 0; c < this.hCells; c++) {
				int neighbors = this.getNumNeighbors(r, c);
				if ((neighbors < min || neighbors > max) && this.currentState.cellIsAliveAt(r, c))
					this.newState.removeCell(c, r);
				if (neighbors == birthVal)
					this.newState.addCell(new Cell(c * this.cellWidth, r * this.cellWidth, this.cellWidth));
			}
		}

		this.currentState = this.newState.clone(); // replace current state with new
		this.repaint();
	}

	// determines which cells to check depending on location of cell relative to
	// number of cells in x,y direction
	public int getNumNeighbors(int r, int c) {
		// determine position in array
		boolean isTop = r == 0;
		boolean isBottom = r == this.vCells - 1;
		boolean isLeft = c == 0;
		boolean isRight = c == this.hCells - 1;

		// wrap values around AKA nifty toroidal action!
		int top = isTop ? this.vCells - 1 : r - 1;
		int bottom = isBottom ? 0 : r + 1;
		int left = isLeft ? this.hCells - 1 : c - 1;
		int right = isRight ? 0 : c + 1;

		// create neighbors based on the left right top and bottom values found
		int[][] neighbors = new int[][] { { top, left }, { top, c }, { top, right }, { r, left }, { r, right },
			{ bottom, left }, { bottom, c }, { bottom, right } };

			int adjacentCells = 0;
			for (int i = 0; i < 8; i++)
				if (this.currentState.cellIsAliveAt(neighbors[i][0], neighbors[i][1]))
					adjacentCells++; // add all the neighbors together
			return adjacentCells;
	}

	// draws cell in grid configuration
	public void addNewCells(MouseEvent click) {
		int inputX = click.getX();
		int inputY = click.getY();
		// match input coordinate to corresponding x,y value in upper left
		// corner used to draw cell
		for (int x = 0; x <= this.getWidth() - this.cellWidth; x += this.cellWidth) {
			for (int y = 0; y <= this.getHeight() - this.cellWidth; y += this.cellWidth) {
				boolean clickContainedInXBounds = inputX >= x && inputX < x + this.cellWidth;
				boolean clickContainedInYBounds = inputY >= y && inputY < y + this.cellWidth;
				if (clickContainedInXBounds && clickContainedInYBounds) {
					// draw a pulsar contained in bounds of screen
					if (this.drawPulsar) {
						// cut off overhanging parts of screen that don't contain a cell
						int screenBoundsX = this.getWidth() - this.getWidth() % this.cellWidth;
						int screenBoundsY = this.getHeight() - this.getHeight() % this.cellWidth;
						ArrayList<Cell> possibleNewCells = new ArrayList<>();

						// the two bars down the side
						for (int i = 0; i <= 4; i++) {
							possibleNewCells.add(new Cell(x, y + i * this.cellWidth, this.cellWidth));
							possibleNewCells.add(new Cell(x + 4 * this.cellWidth, y + i * this.cellWidth, this.cellWidth));
						}

						// the two dots
						possibleNewCells.add(new Cell(x + 2 * this.cellWidth, y, this.cellWidth));
						possibleNewCells.add(new Cell(x + 2 * this.cellWidth, y + 4 * this.cellWidth, this.cellWidth));

						for (Cell cell : possibleNewCells) {
							if (cell.getX() < screenBoundsX && cell.getY() < screenBoundsY)
								this.currentState.addCell(cell);
						}
					} else {
						this.currentState.addCell(new Cell(x, y, this.cellWidth));
					}
					this.repaint();
					return;
				}
			}
		}
	}

	// paints button and cells in current state
	public void drawInputCells(Graphics g) {
		g.setColor(this.cellColor);
		for (Cell cell : this.currentState.getAllCells())
			cell.draw(g);
		this.drawAllCells(g);
	}

	// draws user input cells and previous states if existing
	public void drawAllCells(Graphics g) {
		Color fade = this.cellColor;
		int dR = this.cellColor.getRed() / (this.savedEvolutions + 2);
		int dG = this.cellColor.getGreen() / (this.savedEvolutions + 2);
		int dB = this.cellColor.getBlue() / (this.savedEvolutions + 2);
		for (int state = 0; state < this.states.size(); state++) {
			// lighter to darker
			if (state != 0)
				fade = new Color(fade.getRed() - dR, fade.getGreen() - dG, fade.getBlue() - dB);
			g.setColor(fade);
			for (Cell cell : this.states.get(state).getAllCells())
				cell.draw(g);
		}
	}

	@Override
	public void paint(Graphics g) {
		g.setColor(this.bgColor);
		g.fillRect(0, 0, this.getWidth(), this.getHeight());
		if (this.cellsInput) {
			this.drawInputCells(g);
		} else if (!this.cellsInput) {
			this.drawAllCells(g);
		}
		if (this.drawGrid) {
			g.setColor(Color.gray);
			for (int x = 0; x < this.getWidth() - this.cellWidth; x += this.cellWidth) {
				for (int y = 0; y < this.getHeight() - this.cellWidth; y += this.cellWidth) {
					g.drawRect(x, y, this.cellWidth, this.cellWidth);
				}
			}
		}
	}

	@Override
	public final void update(Graphics g) {
		Image img = this.createImage(this.getWidth(), this.getHeight());
		Graphics graphics = img.getGraphics();
		this.paint(graphics);
		g.drawImage(img, 0, 0, this);
	}

	// only draw cells within applet size
	@Override
	public void componentResized(ComponentEvent e) {
		this.timer.stop();
		this.vCells = this.getHeight() / this.cellWidth;
		this.hCells = this.getWidth() / this.cellWidth;
		this.currentState.sizeChange(this.vCells, this.hCells);
		this.newState.sizeChange(this.vCells, this.hCells);
	}

	@Override
	public void mouseClicked(MouseEvent click) {
		this.cellsInput = true;
		this.addNewCells(click);
	}

	@Override
	public void mouseDragged(MouseEvent click) {
		this.cellsInput = true;
		this.addNewCells(click);
	}

	@Override
	public void keyPressed(KeyEvent e) {
		switch (e.getKeyCode()) {
		case KeyEvent.VK_SPACE:
			if (this.cellsInput)
				this.cellsInput = false;
			if (!this.timer.isRunning())
				this.timer.start();
			else
				this.timer.stop();
			break;
		case KeyEvent.VK_RIGHT:
			this.timer.stop();
			if (this.delayInSeconds > .05)
				this.delayInSeconds -= .025;
			this.timer = new Timer((int) (this.delayInSeconds * 1000), this);
			this.timer.start();
			break;
		case KeyEvent.VK_LEFT:
			this.timer.stop();
			this.delayInSeconds += .025;
			this.timer = new Timer((int) (this.delayInSeconds * 1000), this);
			this.timer.start();
			break;
		case KeyEvent.VK_UP:
			if (this.colorIterator.hasPrevious()) {
				this.cellColor = this.colorIterator.previous();
				this.bgColor = new HSLColor(this.cellColor).getComplementary();
				this.repaint();
			}
			break;
		case KeyEvent.VK_DOWN:
			if (this.colorIterator.hasNext()) {
				this.cellColor = this.colorIterator.next();
				this.bgColor = new HSLColor(this.cellColor).getComplementary();
				this.repaint();
			}
			break;
		case KeyEvent.VK_G:
			this.drawGrid = !this.drawGrid;
			this.repaint();
			break;
		case KeyEvent.VK_P:
			this.drawPulsar = !this.drawPulsar;
			break;
		case KeyEvent.VK_B:
			// draw a number of pulsars within the screen constraints
			int initX = 8 * this.cellWidth;
			int initY = 14 * this.cellWidth;
			int pulsarWidthFromInit = this.cellWidth * 10;
			for (int shift = 0; shift <= 9 * this.cellWidth; shift += 9 * this.cellWidth) {
				for (int x = initX + shift; x < this.getWidth() - pulsarWidthFromInit; x += this.cellWidth * 18) {
					for (int y = initY + 2 * shift; y < this.getHeight() - pulsarWidthFromInit; y += 2 * this.cellWidth
							* 18) {
						for (int i = 0; i <= 4; i++) {
							this.currentState.addCell(new Cell(x, y + i * this.cellWidth, this.cellWidth));
							this.currentState
							.addCell(new Cell(x + 4 * this.cellWidth, y + i * this.cellWidth, this.cellWidth));
						}
						this.currentState.addCell(new Cell(x + 2 * this.cellWidth, y, this.cellWidth));
						this.currentState.addCell(new Cell(x + 2 * this.cellWidth, y + 4 * this.cellWidth, this.cellWidth));
					}
				}
			}
			this.repaint();
			break;
		}
	}

	// ignored inherited methods...
	@Override
	public void componentShown(ComponentEvent e) {
	}

	@Override
	public void mouseEntered(MouseEvent e) {
	}

	@Override
	public void mouseExited(MouseEvent e) {
	}

	@Override
	public void mousePressed(MouseEvent e) {
	}

	@Override
	public void mouseReleased(MouseEvent e) {
	}

	@Override
	public void mouseMoved(MouseEvent e) {
	}

	@Override
	public void componentHidden(ComponentEvent e) {
	}

	@Override
	public void componentMoved(ComponentEvent e) {
	}

	@Override
	public void keyReleased(KeyEvent e) {
	}

	@Override
	public void keyTyped(KeyEvent e) {
	}

}
