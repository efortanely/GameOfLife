import java.util.ArrayList;

public class EvolutionState extends ColorfulCellularAutomaton{
	private static final long serialVersionUID = 1L;
	private Cell[][] state;
	private ArrayList<Cell> aliveCells;
	private int vCells, hCells;

	public EvolutionState(int vCells, int hCells){
		this.aliveCells = new ArrayList<>();
		this.state = new Cell[vCells][hCells];
		this.vCells = vCells;
		this.hCells = hCells;
	}

	//adds cell to arraylist of alive cells, corresponding r,c location based on x,y coordinate, increases number of cells
	public void addCell(Cell inputCell){
		if (!this.getAllCells().contains(inputCell)) {
			this.aliveCells.add(inputCell);
			this.state[inputCell.getRow()][inputCell.getColumn()] = inputCell;
		}
	}

	//removes cell from arraylist of alive cells, corresponding r,c location based on x,y coordinate, decreases number of cells
	public void removeCell(Cell celltoRemove){
		this.aliveCells.remove(celltoRemove);
		this.state[celltoRemove.getRow()][celltoRemove.getColumn()] = null;
	}

	public void sizeChange(int newNumVerticalCells, int newNumHorizontalCells){
		Cell[][] newSizeState = new Cell[newNumVerticalCells][newNumHorizontalCells];

		for (int r = 0; r < this.vCells; r++) {
			for (int c = 0; c < this.hCells; c++) {
				try {
					newSizeState[r][c] = this.state[r][c];
				} catch (ArrayIndexOutOfBoundsException cellOutOfRange) {
					if (this.state[r][c] != null)
						this.removeCell(this.state[r][c]);
				}
			}
		}

		this.vCells = newNumVerticalCells;
		this.hCells = newNumHorizontalCells;
		this.state = newSizeState.clone();
	}

	//creates an evolution state containing all points of copied state
	@Override
	public EvolutionState clone(){
		EvolutionState state = new EvolutionState(this.vCells, this.hCells);
		for (Cell cell : this.getAllCells())
			state.addCell(cell);
		return state;
	}

	//getters

	public Cell getCell(int cellRow, int cellColumn){ return this.state[cellRow][cellColumn]; }

	public ArrayList<Cell> getAllCells(){ return this.aliveCells; }
}
