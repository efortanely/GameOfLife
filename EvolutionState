import java.util.ArrayList;

public class EvolutionState extends ColorfulCellularAutomaton{
	private boolean[][] state;
	private ArrayList<Cell> aliveCells;
	private int vCells, hCells;
	private int cellWidth;

	public EvolutionState(int vCells, int hCells, int cellWidth) {
		this.aliveCells = new ArrayList<>();
		this.vCells = vCells;
		this.hCells = hCells;
		this.state = new boolean[vCells][hCells];
		this.cellWidth = cellWidth;
	}

	//adds cell to arraylist of alive cells, corresponding r,c location based on x,y coordinate, increases number of cells
	public void addCell(Cell inputCell){
		int row = inputCell.getRow();
		int col = inputCell.getColumn();
		if (!this.state[row][col]) {
			this.aliveCells.add(inputCell);
			this.state[row][col] = true;
		}
	}

	//removes cell from arraylist of alive cells, corresponding r,c location based on x,y coordinate, decreases number of cells
	public void removeCell(int col, int row) {
		Cell cellToRemove = new Cell(col * this.cellWidth, row * this.cellWidth, this.cellWidth);
		if (this.state[row][col]) {
			this.aliveCells.remove(cellToRemove);
			this.state[cellToRemove.getRow()][cellToRemove.getColumn()] = false;
		}
	}

	public void sizeChange(int newNumVerticalCells, int newNumHorizontalCells){
		boolean[][] newSizeState = new boolean[newNumVerticalCells][newNumHorizontalCells];

		for (int r = 0; r < this.vCells; r++) {
			for (int c = 0; c < this.hCells; c++) {
				try {
					newSizeState[r][c] = this.state[r][c];
				} catch (ArrayIndexOutOfBoundsException cellOutOfRange) {
					if (!this.state[r][c]) {
						this.removeCell(c, r);
					}
				}
			}
		}

		this.vCells = newNumVerticalCells;
		this.hCells = newNumHorizontalCells;
		this.state = newSizeState.clone();
	}

	//creates an evolution state containing all points of copied state
	@Override
	public EvolutionState clone(){
		EvolutionState state = new EvolutionState(this.vCells, this.hCells, this.cellWidth);
		for (Cell cell : this.getAllCells())
			state.addCell(cell);
		return state;
	}

	//getters

	public boolean cellIsAliveAt(int cellRow, int cellColumn) {
		return this.state[cellRow][cellColumn];
	}

	public ArrayList<Cell> getAllCells() {
		return this.aliveCells;
	}
}
